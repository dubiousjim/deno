name: ci

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.kind }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [macOS-latest, windows-2019, ubuntu-16.04]
        kind: ['test_release', 'test_debug', 'lint']
        exclude:
          - os: windows-2019
            kind: 'lint'
          - os: macOS-latest
            kind: 'lint'

          - os: windows-2019
            kind: 'test_debug'
          - os: macOS-latest
            kind: 'test_debug'
    steps:
      - name: Configure git
        run: git config --global core.symlinks true

      - name: Clone repository
        uses: actions/checkout@v1
        with:
          # Use depth > 1, because sometimes we need to rebuild master and if
          # other commits have landed it will become impossible to rebuild if
          # the checkout is too shallow.
          fetch-depth: 20
          submodules: true

      - name: Create source tarballs (release, linux)
        if: startsWith(matrix.os, 'ubuntu') && matrix.kind == 'test_release' && startsWith(github.ref, 'refs/tags/') && github.repository == 'denoland/deno'
        run: |
          mkdir -p target/release
          tar --exclude=".git*" --exclude=target --exclude=deno_typescript/typescript/tests --exclude=third_party/cpplint --exclude=third_party/node_modules --exclude=third_party/python_packages --exclude=third_party/prebuilt -czvf target/release/deno_src.tar.gz -C .. deno

      - name: Install rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: "1.41.0"

      - name: Install clippy and rustfmt
        if: matrix.kind == 'lint'
        run: |
          rustup component add clippy
          rustup component add rustfmt

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: "2.7"
          architecture: x64

      - name: Remove unused versions of Python
        if: startsWith(matrix.os, 'windows')
        run: |-
          $env:PATH -split ";" |
            Where-Object { Test-Path "$_\python.exe" } |
            Select-Object -Skip 1 |
            ForEach-Object { Move-Item "$_" "$_.disabled" }

      - name: Environment (common)
        run: |
          echo ::set-env name=GH_ACTIONS::1
          echo ::set-env name=RUSTC_WRAPPER::sccache
          echo ::set-env name=DENO_BUILD_MODE::release
          echo ::set-env name=RUST_BACKTRACE::full

      - name: Environment (linux)
        if: startsWith(matrix.os, 'ubuntu')
        # In order to test the installer scripts in std we need a deno
        # executable in the path. See
        # https://github.com/denoland/deno/blob/27cd2c97f18c0392bc04c66b786717b2bc677315/std/installer/mod.ts#L185-L193
        # TODO(ry) This path modification should rather be done in "cargo test".
        run: |
          echo ::add-path::`pwd`/third_party/prebuilt/linux64
          echo ::add-path::`pwd`/target/release

      - name: Environment (mac)
        if: startsWith(matrix.os, 'macOS')
        run: |
          echo ::add-path::`pwd`/third_party/prebuilt/mac
          echo ::add-path::`pwd`/target/release

      - name: Environment (windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          echo ::add-path::$(pwd)\third_party\prebuilt\win
          echo ::add-path::$(pwd)\target\release

      - name: Log versions
        run: |
          node -v
          python --version
          rustc --version
          cargo --version

      - name: Start sccache
        env:
          AWS_ACCESS_KEY_ID: AKIAIVRN52PLDBP55LBQ
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SCCACHE_BUCKET: deno-sccache
          SCCACHE_IDLE_TIMEOUT: 0
        run: sccache --start-server

      - name: lint.py
        if: matrix.kind == 'lint'
        run: python ./tools/lint.py

      - name: test_format.py
        if: matrix.kind == 'lint'
        run: python ./tools/test_format.py

      - name: Build
        if: matrix.kind == 'test_release'
        run: cargo build --release --locked --all-targets

      - name: Test release
        if: matrix.kind == 'test_release'
        run: cargo test --release --locked --all-targets

      - name: Test debug
        if: matrix.kind == 'test_debug'
        run: |
          echo ::set-env name=DENO_BUILD_MODE::debug
          cargo test --locked --all-targets

      - name: Stop sccache
        run: sccache --stop-server
